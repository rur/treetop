package page

import (
	"fmt"
	"net/http"

	"github.com/rur/treetop"

	"{{ .Namespace }}/app"
)

// facade used by router to wrap request handlers
type Context interface {
	Bind(ResourceHandler) treetop.HandlerFunc
}

type cxt struct {
	srv app.Server
}

func NewContext(s app.Server) Context {
	return &cxt{s}
}

type ResourceHandler func(app.Resources, treetop.Response, *http.Request) interface{}

func (c *cxt) Bind(f ResourceHandler) treetop.HandlerFunc {
	return func(rsp treetop.Response, req *http.Request) interface{} {
		// load resources for this request and pass on to the handler.
		if rsc, err := c.srv.LoadResources(rsp.ResponseID(), rsp.Context(), req); err != nil {
			// EDITME: specify how to handle resource level errors here
			switch err.(type) {
			case *app.AuthenticationError:
				http.Error(rsp, fmt.Sprintf("Authentication Error: %s", err), http.StatusUnauthorized)
			default:
				http.Error(rsp, fmt.Sprintf("Failed to load resources: %s", err), http.StatusInternalServerError)
			}
			return nil
		} else {
			return f(*rsc, rsp, req)
		}
	}
}

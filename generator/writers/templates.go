// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-09-23 12:38:50.390242 -0700 PDT m=+0.020940557
package writers

import (
	html "html/template"
	"log"
	text "text/template"
)

var (
	contextTemplate *text.Template
	fragmentTemplate *html.Template
	handlerTemplate *text.Template
	indexTemplate *html.Template
	pageTemplate *text.Template
	partialTemplate *html.Template
	startTemplate *text.Template
	
)

func init() {
	var err error
	contextTemplate, err = text.New("templates/context.go.templ").Parse(contextTempl)
	if err != nil {
		log.Fatal(err)
	}
	fragmentTemplate, err = html.New("templates/fragment.templ.html").Delims("[[", "]]").Parse(fragmentTempl)
	if err != nil {
		log.Fatal(err)
	}
	handlerTemplate, err = text.New("templates/handler.go.templ").Parse(handlerTempl)
	if err != nil {
		log.Fatal(err)
	}
	indexTemplate, err = html.New("templates/index.templ.html").Delims("[[", "]]").Parse(indexTempl)
	if err != nil {
		log.Fatal(err)
	}
	pageTemplate, err = text.New("templates/page.go.templ").Parse(pageTempl)
	if err != nil {
		log.Fatal(err)
	}
	partialTemplate, err = html.New("templates/partial.templ.html").Delims("[[", "]]").Parse(partialTempl)
	if err != nil {
		log.Fatal(err)
	}
	startTemplate, err = text.New("templates/start.go.templ").Parse(startTempl)
	if err != nil {
		log.Fatal(err)
	}
	
}

// templates/context.go.templ
var contextTempl = `package pages

import (
	"net/http"

	"github.com/rur/treetop"
)

type ServerContext struct {
	Example bool
}

type RequestContext struct {
	Example bool
}

func (s *ServerContext) Bind(f func(*RequestContext, treetop.DataWriter, *http.Request)) treetop.HandlerFunc {
	return func(w treetop.DataWriter, req *http.Request) {
		// this will be called for every request to a bound handler
		cxt := RequestContext{s.Example}
		f(&cxt, w, req)
	}
}

type Mux interface {
	Handle(pattern string, handler http.Handler)
}
`

// templates/fragment.templ.html
var fragmentTempl = `<!-- Fragment extends block "[[ .Extends ]]" -->
<div id="[[ .Extends ]]" class="block-extended fragment">
    <p>View Fragment named [[ .Name ]], path [[ .Path ]]</p>
</div>`

// templates/handler.go.templ
var handlerTempl = `package {{ .PageName }}

import (
	"net/http"

	"github.com/rur/treetop"
	"{{ .Namespace }}/pages"
)

{{ range $index, $handler := .Handlers }}
// {{ $handler.Info }} {{ $handler.Type }}{{ if $handler.Extends }}
// Extends: {{ $handler.Extends }}{{ end }}{{ if $handler.Doc }}
// Doc: {{ $handler.Doc }}
{{- end }}{{ if len $handler.Blocks}}
func {{ $handler.Identifier }}(cxt *pages.RequestContext, w treetop.DataWriter, req *http.Request) {
	{{ range $index, $block := .Blocks -}}
	{{ $block.Identifier }}, ok := w.PartialData("{{ $block.Name }}", req)
	if !ok {
		// default {{ $block.Name }} data
		{{ $block.Identifier }} = nil
	}
	{{ end }}
	w.Data(struct {
		HandlerInfo string{{ range $index, $block := .Blocks }}
		{{ $block.FieldName }} interface{}
		{{- end }}
	}{
		HandlerInfo: "{{ $handler.Info }}",{{ range $index, $block := .Blocks }}
		{{ $block.FieldName }}: {{ $block.Identifier }},
		{{- end }}
	})
}{{ else }}
func {{ $handler.Identifier }}(cxt *pages.RequestContext, w treetop.DataWriter, req *http.Request) {
	w.Data("{{ $handler.Info }} template data here!")
}{{ end }}
{{ end }}
`

// templates/index.templ.html
var indexTempl = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Page [[ .Title ]]</title>
    <style>

    body {
        padding: 1rem;
    }

    .page-nav {
        float: right;
    }

    .nav li {
        display: inline-block;
        margin-right: 1rem;
        margin-bottom: 1rem;
        background-color: aqua;
        padding: 0.2rem 1rem;
    }

    .page-nav li {
        background-color: greenyellow;
    }

    .block-extended {
        background-color: rgba(0, 0, 0, 0.1);
        padding: 0.5rem;
    }

    .block-default {
        background-color: lightsalmon;
        padding: 0.5rem;
    }

    .fragment {
        background-color: darkcyan;
        color: white;
    }
    </style>
</head>
<body>
    <ul class="page-nav nav">[[ range $link := .SiteLinks ]]
        [[ if $link.Active ]]<li><a href="[[ $link.URI ]]">[[ $link.Label ]]</a></li>[[ else ]]
        <li>[[ $link.Label ]]</li>[[ end ]][[ end ]]
    </ul>
    <h1>[[ .Title ]] page</h1>[[ range $index, $block := .Blocks ]]
    <h2>Block [[ $block.Name ]]</h2>
    <ul class="nav">[[ range $partial := $block.Partials ]][[ if $partial.Path ]][[ if $partial.Default ]]
        <li><a href="[[ $partial.Path ]]" treetop>[[ $partial.Name ]]*</a></li>
        [[- else -]]
        <li><a href="[[ $partial.Path ]]" treetop>[[ $partial.Name ]]</a></li>
        [[- end ]][[- end ]]
    [[ end ]]</ul>
    {{ block "[[ $block.Name ]]" .[[ $block.FieldName ]] }}
    <div id="[[ $block.Name  ]]" class="block-default">
        <p>default for block named [[ $block.Name ]]</p>
    </div>
    {{ end }}
[[ end ]]

    <script> window.TREETOP_CONFIG = {} </script>
    <script async src="https://rawgit.com/rur/treetop-client/master/treetop.js"></script>
</body>
</html>`

// templates/page.go.templ
var pageTempl = `package {{ .Name }}

import (
	"github.com/rur/treetop"
	"{{ .Namespace }}/pages"
)

func Page(server *pages.ServerContext, m pages.Mux, renderer treetop.Renderer) {
	page := renderer.Page(
		"{{ .Template }}",
		server.Bind({{ .Handler }}),
	)
	{{ range $index, $block := .Blocks -}}
		{{ $block.Identifier }} page.Block("{{ $block.Name }}")
	{{ end }}
	{{ range $index, $entry := .Entries -}}
	{{ if eq $entry.Type "Block" -}}
	{{ $entry.Identifier }} {{ $entry.Extends }}.Block("{{ $entry.Name }}")
	{{- else if eq $entry.Type "DefaultPartial" -}}
	{{ $entry.Identifier }} {{ $entry.Extends }}.DefaultPartial(
		"{{ $entry.Template }}",
		server.Bind({{ $entry.Handler }}),
	)
	{{- else if eq $entry.Type "Partial" -}}
	{{ $entry.Identifier }} {{ $entry.Extends }}.Partial(
		"{{ $entry.Template }}",
		server.Bind({{ $entry.Handler }}),
	)
	{{- else if eq $entry.Type "Fragment" -}}
	{{ $entry.Identifier }} {{ $entry.Extends }}.Fragment(
		"{{ $entry.Template }}",
		server.Bind({{ $entry.Handler }}),
	)
{{- else if eq $entry.Type "Spacer" }}{{ else -}}
	nil // unknown entry type: {{ $entry.Type }}
	{{- end }}
	{{ end }}{{ range $index, $route := .Routes }}
	m.Handle("{{ $route.Path }}", {{ $route.Reference }}{{ if $route.PartialAsFragment }}.AsFragment(){{ end }})
	{{- end }}
}
`

// templates/partial.templ.html
var partialTempl = `{{ block "[[ .Extends ]]" . }}
<div id="[[ .Extends ]]" class="block-extended">
    <p>Partial view named [[.Name]]</p>[[ range $index, $block := .Blocks ]]
<h3>Block [[ $block.Name ]]</h3>
<ul class="nav">[[ range $partial := $block.Partials ]][[ if $partial.Path ]][[ if $partial.Default ]]
    <li><a href="[[ $partial.Path ]]" treetop>[[ $partial.Name ]]*</a></li>[[ else ]]
    <li><a href="[[ $partial.Path ]]" treetop>[[ $partial.Name ]]</a></li>
    [[- end ]][[- end ]]
[[ end ]]</ul>
{{ block "[[ $block.Name ]]" .[[ $block.FieldName ]] }}
<div id="[[ $block.Name  ]]" class="block-default">
    <p>default for block named [[ $block.Name ]]</p>
</div>
{{ end }}
[[ end ]]
</div>
{{ end }}`

// templates/start.go.templ
var startTempl = `package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/rur/treetop"

	"{{ .Namespace }}/pages"
	{{ range $index, $page := .Pages -}}
	"{{ $.Namespace }}/pages/{{ $page }}"
	{{ end }}
)

var (
	addr = ":8000"
)

func main() {
	m := http.NewServeMux()

	cxt := pages.ServerContext{Example: true}

	renderer := treetop.NewRenderer(treetop.DefaultTemplateExec){{ range $index, $page := .Pages }}
	{{ $page }}.Page(&cxt, m, renderer)
{{- end }}

	fmt.Printf("Starting treetop-workspace server at %s", addr)
	// Bind to a addr and pass our router in
	log.Fatal(http.ListenAndServe(addr, m))
}

`

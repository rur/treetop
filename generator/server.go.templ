package server

import (
	"net/http"

	"github.com/rur/treetop"
)

type ServerContext struct {
	Example bool
}

type RequestContext struct {
	Example bool
}

func (s *ServerContext) bind(f func(*RequestContext, treetop.DataWriter, *http.Request)) treetop.HandlerFunc {
	return func(w treetop.DataWriter, req *http.Request) {
		cxt := RequestContext{s.Example}
		f(&cxt, w, req)
	}
}

type mux interface {
	Handle(pattern string, handler http.Handler)
}

func NewTreetopServer(m mux, s ServerContext) {
	renderer := treetop.NewRenderer(treetop.DefaultTemplateExec){{ range $index, $page := .Pages }}
	{{ $page.Identifier }}(&s, m, renderer)
{{- end }}
}

{{ range $index, $page := .Pages -}}
func {{ $page.Identifier }}(server *ServerContext, m mux, renderer treetop.Renderer) {
	{{ $page.Identifier }} := renderer.Page("{{ $page.Template.Path }}", server.bind({{ $page.Handler }}))
	{{ range $index, $block := $page.Blocks -}}
		{{ $block.Identifier }} := {{ $page.Identifier }}.Block("{{ $block.Name }}")
	{{ end }}
	{{ range $index, $entry := $page.Entries -}}
	{{ if eq $entry.Type "Block" -}}
	{{ $entry.Identifier }} := {{ $entry.Extends }}.Block("{{ $entry.Name }}")
	{{- else if eq $entry.Type "DefaultPartial" -}}
	{{ $entry.Identifier }} := {{ $entry.Extends }}.DefaultPartial("{{ $entry.Template }}", server.bind({{ $entry.Handler }}))
	{{- else if eq $entry.Type "Partial" -}}
	{{ $entry.Identifier }} := {{ $entry.Extends }}.Partial("{{ $entry.Template }}", server.bind({{ $entry.Handler }}))
	{{- else if eq $entry.Type "Fragment" -}}
	{{ $entry.Identifier }} := {{ $entry.Extends }}.Fragment("{{ $entry.Template }}", server.bind({{ $entry.Handler }}))
{{- else if eq $entry.Type "Spacer" }}{{ else -}}
	nil // unknown entry type: {{ $entry.Type }}
	{{- end }}
	{{ end }}{{ range $index, $route := .Routes }}
	m.Handle("{{ $route.Path }}", {{ $route.Identifier }})
	{{- end }}
}

{{ end }}

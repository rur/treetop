<div id="content">
	<hr>
	<h3>Create a new issue <span class="badge badge-warning">WIP</span></h3>
	<section class="mt-3 mb5">
	<p>Demonstrate different controls working together for a more complex workflow.</p>

	<div class="d-none" id="error-message"></div>

	<form id="issue" treetop>
		<div class="form-group row">
			<label for="inputTitle" class="col-sm-3 col-form-label">Summary</label>
			<div class="col-sm-9">
				<input autofocus="autofocus" required type="text" name="summary" class="form-control" id="inputTitle" placeholder="Title for you issue" value="{{ .Summary }}">
			</div>
		</div>
		<div class="form-group row">
			<label for="departmentSelect" class="col-sm-3 col-form-label">Department</label>
			<div class="col-sm-9">
				<select class="form-control" id="departmentSelect" name="department" onchange="document.getElementById('update-department').click()" required="required">
					<option disabled value=""{{ if eq .Dept "" }} selected{{ end }}>-- choose one --</option>
					<option value="helpdesk"{{ if eq .Dept "helpdesk" }} selected{{ end }}>Help Desk</option>
					<option value="software"{{ if eq .Dept "software" }} selected{{ end }}>Software Development</option>
					<option value="systems"{{ if eq .Dept "systems" }} selected{{ end }}>Systems & IT</option>
				</select>
				{{/* submit button will update form when department is changed */}}
				<button class="d-none" id="update-department" treetop-submitter formnovalidate formaction="/ticket/get-form"></button>
			</div>
		</div>

		{{ block "form" .Form}}
		<div id="form" class="my-4 alert alert-light text-center">
			<h5 class="alert-heading">Please Select a Department</h5>
			<p class="mb-0">Choosing a department will show the form specific to that department.</p>
		</div>

		{{ end }}

	</form>
	</section>
</div>

{{ define "treetop-config" }}
<script>
		// activate treetop with custom form control attributes
		window.TREETOP_CONFIG = {
			/*
				# Mount Attributes #

				A set of attribute names which can be used to mount JS code and components
				to an element when it is attached to the DOM.

				The components used here are primarily for enhanced keyboard
				control over form inputs and controls.

			 */
			mountAttr: {

				'autofocus': function (emt) {
					// autofocus attribute component will cause an input element
					// to be focused and have the cursor placed at the end of the input.
					emt.focus()

					setTimeout(function(){
						// move cursor to the end of the input, this is buggy but non-essential
						if (emt.type != "email") {
							emt.selectionStart = emt.selectionEnd = 10000;
						} else {
							emt.select()
						}
					}, 0);
				},

				'enter-submitter': function (el) {
					// specify the form submitter button for an text input ENTER submit
					// Use the attribute value to find the submitter element
					// if none is found, throw an error and do not register the listener
					var submitButtonID = el.getAttribute("enter-submitter")
					var submitButton = document.getElementById(submitButtonID)
					if (!submitButton) {
						throw Error("enter-submitter: No submitter element found for #"+submitButtonID)
					}
					function onKeyDown(e) {
						if (e.key == "Enter") {
							e.preventDefault()
							submitButton.click()
						}
					}
					el.addEventListener('keydown', onKeyDown, false);
				},

				'click-on-change': function (el) {
					// when mounted element emits a 'change' event
					// attempt to find the element with the corresponding ID
					// and trigger a click on that element.
					const clickID = el.getAttribute("click-on-change")
					if (!clickID) {
						return
					}
					el.addEventListener("change", function (evt) {
						const clickElem = document.getElementById(clickID)
						if (clickElem instanceof HTMLElement) {
							clickElem.click()
						}
					})
				},

				'remove-me': function (el) {
					// designate a child element that will cause this element to be
					// removed from the DOM
					const removeQuery = el.getAttribute("remove-me")
					if (!removeQuery) {
						return
					}
					const removeBtn = el.querySelector(removeQuery)
					if (!removeBtn) {
						return
					}
					removeBtn.addEventListener("click", () => {
						treetop.unmount(el);
					});
				},

				'limit-upload-file-mb': function (el) {
					// Prevent files larger than a specified size from being selected
					// by the file input.
					if (!(el instanceof HTMLInputElement) || el.type !== "file") return;

					const maxMB = parseInt(el.getAttribute("limit-upload-file-mb"), 10)
					if (!maxMB || maxMB < 0) return
					const maxBytes = maxMB*1024*1024
					el.addEventListener("change", function (evt) {
						for (let i = 0; i < el.files.length; i++) {
							if (el.files[i].size > maxBytes) {
								alert("File '" + el.files[i].name + "' is larger than max size of " + maxMB + "MB")
								el.value = ""
								evt.stopImmediatePropagation()
								return false;
							}
						}
					})
				}
			},

			/*
				# Element Merge #

				When a new element is matched with an existing one, the treetop client
				will swap one for the other by default. However, if the new and old element
				have a matching `treetop-merge` attribute value, and a corresponding functions
				is defined here, that function will be used instead.

			 */
			merge: {

				'update-child': function (nue, old) {
					// Having received an update for an element, try only updating a child element.
					// The "data-update-child-id" attribute value will supply an identifier to find
					// the corresponding child elements.
					//
					// If a pair of matching children cannot be found, just do a standard swap.
					const childID = old.getAttribute("data-update-child-id")
					if (childID) {
						const oldChild = old.querySelector("#"+childID)
						const nueChild = nue.querySelector("#"+childID)
						if (nueChild instanceof HTMLElement && oldChild instanceof HTMLElement) {
							//  swap the new child for the old one
							treetop.updateElement(nueChild, oldChild)
							return
						}
					}
					// fall back on standard element swap
					treetop.updateElement(nue, old)
				},

				'dedup-append': function (nue, old) {
					// append children of new element to existing
					// replacing any existing children elements with matching IDs
					for (let i = 0; i < nue.children.length; i++) {
						const child = nue.children[i]
						if (child.id) {
							const existing = old.querySelector("#" + child.id)
							if (existing)  {
								treetop.updateElement(child, existing)
								continue
							}
						}
						// append child to existing DOM node
						treetop.mountChild(child, old)
					}
				}
			},
			onNetworkError: function (xhr) {
				alert("Network Error, check your connection.")
			},
			onUnsupported: function (xhr) {
				alert("Unexpected response following a template request, check network inspector for details.")
			}
		};
</script>
{{ end }}